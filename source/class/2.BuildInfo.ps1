using namespace System.IO

class BuildInfo {
    # The name of the module being built.
    [String]$ModuleName = (Get-Item $pwd).Parent.GetDirectories((Split-Path $pwd -Leaf)).Name

    # The build steps.
    [BuildType]$BuildType

    # The release type.
    [ValidateSet('Build', 'Minor', 'Major')]
    [String]$ReleaseType

    [Version]$Version

    [BuildTask[]]$BuildTask

    # The root of this repository.
    [String]$ProjectRoot = ((git rev-parse --show-toplevel) -replace '/', ([Path]::DirectorySeparatorChar))

    # The root of the item which is being built.
    [DirectoryInfo]$Source = $pwd.Path

    # The package generated by the build process.
    [DirectoryInfo]$Package

    # An output directory which stores files created by tools like Pester.
    [DirectoryInfo]$Output

    # The manifest associated with the package.
    [String]$ReleaseManifest

    # The root module associated with the package.
    [String]$ReleaseRootModule

    # Acceptable code coverage threshold.
    [Double]$CodeCoverageThreshold = 0.9

    # Constructors

    BuildInfo($BuildType, $ReleaseType) {
        $this.BuildType = $BuildType
        $this.ReleaseType = $ReleaseType

        $this.Version = $this.GetVersion()
        $this.BuildTask = $this.GetBuildTask()

        $this.Package = Join-Path $pwd $this.Version
        $this.Output = Join-Path $pwd 'Output'
        if ($pwd.Path -ne $this.ProjectRoot) {
            $this.Package = [Path]::Combine($this.ProjectRoot, 'build', $this.ModuleName, $this.Version)
            $this.Output = [Path]::Combine($this.ProjectRoot, 'build', $this.ModuleName, 'output')
        }
        $this.ReleaseManifest = Join-Path $this.Package ('{0}.psd1' -f $this.ModuleName)
        $this.ReleaseRootModule = Join-Path $this.Package ('{0}.psm1' -f $this.ModuleName)
    }

    # Private methods

    hidden [Version] GetVersion() {
        # Prefer to use version numbers from git.
        $packageVersion = [Version]'1.0.0.0'
        try {
            [String]$gitVersion = (git describe --tags 2> $null) -replace '^v'
            if ([Version]::TryParse($gitVersion, [Ref]$packageVersion)) {
                return $this.IncrementVersion($packageVersion)
            }
        } catch {
            # Do nothing.
        }

        # Fall back to version numbers in the manifest.
        $sourceManifest = [Path]::Combine($this.Source, 'source', ('{0}.psd1' -f $this.ModuleName))
        if (Test-Path $sourceManifest) {
            $manifestVersion = Get-Metadata -Path $sourceManifest -PropertyName ModuleVersion
            if ([Version]::TryParse($manifestVersion, [Ref]$packageVersion)) {
                return $this.IncrementVersion($packageVersion)
            }
        }

        return $packageVersion
    }

    hidden [BuildTask[]] GetBuildTask() {
        return Get-BuildTask | 
            Where-Object { $BuildType -band $_.Stage -and $_.ValidWhen.Invoke() } |
            Sort-Object Stage, Order
    }

    hidden [Version] IncrementVersion($version) {
        $ctorArgs = switch ($this.ReleaseType) {
            'Major' { ($version.Major + 1), 0, 0, 0 }
            'Minor' { $version.Major, ($version.Minor + 1), 0, 0 }
            'Build' { $version.Major, $version.Minor, ($version.Build + 1), 0 }
        }
        return New-Object Version($ctorArgs)
    }
}